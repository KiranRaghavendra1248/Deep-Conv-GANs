# -*- coding: utf-8 -*-
"""DC GANS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FoXJwfLgxVbI5BlYzahs4uSUxwum657i
"""

import torch
from torch import nn
from tqdm.auto import tqdm
from torchvision import transforms
from torchvision.datasets import MNIST
from torchvision.utils import make_grid
from torch.utils.data import DataLoader
import matplotlib.pyplot as plt
from torch.utils.tensorboard import SummaryWriter

# Helper functions

def show_tensor_images(image_tensor, num_images=25, size=(1, 28, 28)):
    image_tensor = (image_tensor + 1) / 2
    image_unflat = image_tensor.detach().cpu()
    image_grid = make_grid(image_unflat[:num_images], nrow=5)
    return image_grid

# Generator Class

class Generator(nn.Module):
  def __init__(self,z_dim=10,image_channels=1,hidden_dim=64):
    super(Generator,self).__init__()
    self.z_dim=z_dim
    self.gen=nn.Sequential(
        self.make_gen_block(z_dim, hidden_dim * 4),
        self.make_gen_block(hidden_dim * 4, hidden_dim * 2, filter_size=4, stride=1),
        self.make_gen_block(hidden_dim * 2, hidden_dim),
        self.make_gen_block(hidden_dim, image_channels, filter_size=4, final=True)
    )
  def make_gen_block(self,input_channels,output_channels,filter_size=3,stride=2,final=False):
    if not final:
      return nn.Sequential(
        nn.ConvTranspose2d(input_channels,output_channels,filter_size,stride),
        nn.BatchNorm2d(output_channels),
        nn.ReLU()
      )
    else:
      return nn.Sequential(
        nn.ConvTranspose2d(input_channels,output_channels,filter_size,stride),
        nn.Tanh()
      )
  def reshape_noise(self,noise):
      return noise.view(len(noise),self.z_dim,1,1)
  def forward(self,noise):
      temp=self.reshape_noise(noise)
      return self.gen(temp)
def get_noise(num,z_dim,device='cpu'):
  return torch.randn((num,z_dim),device=device)

# Discriminator Class

class Discriminator(nn.Module):
  def __init__(self,image_channel=1,hidden_dim=16):
    super(Discriminator,self).__init__()
    self.disc=nn.Sequential(
        self.make_disc_block(image_channel, hidden_dim),
            self.make_disc_block(hidden_dim, hidden_dim * 2),
            self.make_disc_block(hidden_dim * 2, 1, final=True)
    )
  def make_disc_block(self,input_channels,output_channels,filter_size=4,stride=2,final=False):
    if not final:
      return nn.Sequential(
        nn.Conv2d(input_channels,output_channels,filter_size,stride),
        nn.BatchNorm2d(output_channels),
        nn.LeakyReLU(0.2)
      )
    else:
      return nn.Sequential(
        nn.Conv2d(input_channels,output_channels,filter_size,stride)
      )
  def forward(self, image):
        disc_pred = self.disc(image)
        return disc_pred.view(len(disc_pred), -1)

# Params

criterion = nn.BCEWithLogitsLoss()
z_dim = 64
display_step = 500
batch_size = 128
lr = 0.0002
beta_1 = 0.5 
beta_2 = 0.999
device = 'cuda'

transform = transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize((0.5,), (0.5,)),
])

dataloader = DataLoader(
    MNIST('.', download=True, transform=transform),
    batch_size=batch_size,
    shuffle=True)

gen = Generator(z_dim).to(device)
gen_opt = torch.optim.Adam(gen.parameters(), lr=lr, betas=(beta_1, beta_2))
disc = Discriminator().to(device) 
disc_opt = torch.optim.Adam(disc.parameters(), lr=lr, betas=(beta_1, beta_2))

# You initialize the weights to the normal distribution
# with mean 0 and standard deviation 0.02
def weights_init(m):
    if isinstance(m, nn.Conv2d) or isinstance(m, nn.ConvTranspose2d):
        torch.nn.init.normal_(m.weight, 0.0, 0.02)
    if isinstance(m, nn.BatchNorm2d):
        torch.nn.init.normal_(m.weight, 0.0, 0.02)
        torch.nn.init.constant_(m.bias, 0)
gen = gen.apply(weights_init)
disc = disc.apply(weights_init)

print(gen)
print(disc)

writer_real=SummaryWriter(f'runs/GANS_MNIST/real_new')
writer_fake=SummaryWriter(f'runs/GANS_MNIST/fake_new')

# Commented out IPython magic to ensure Python compatibility.
# %load_ext tensorboard
# %tensorboard --logdir runs

n_epochs = 50
cur_step = 0
mean_generator_loss = 0
mean_discriminator_loss = 0
for epoch in range(n_epochs):
  loop=tqdm(dataloader,total=len(dataloader),leave=False) 
  # leave=False if we want progress bar to disappear and start afresh
  for (real,_) in loop:
        cur_batch_size = len(real)
        real = real.to(device)

        ## Update discriminator ##
        disc_opt.zero_grad()
        fake_noise = get_noise(cur_batch_size, z_dim, device=device)
        fake = gen(fake_noise)
        disc_fake_pred = disc(fake.detach())
        disc_fake_loss = criterion(disc_fake_pred, torch.zeros_like(disc_fake_pred))
        disc_real_pred = disc(real)
        disc_real_loss = criterion(disc_real_pred, torch.ones_like(disc_real_pred))
        disc_loss = (disc_fake_loss + disc_real_loss) / 2

        # Keep track of the average discriminator loss
        mean_discriminator_loss += disc_loss.item() / display_step
        # Update gradients
        disc_loss.backward(retain_graph=True)
        # Update optimizer
        disc_opt.step()

        ## Update generator ##
        gen_opt.zero_grad()
        fake_noise_2 = get_noise(cur_batch_size, z_dim, device=device)
        fake_2 = gen(fake_noise_2)
        disc_fake_pred = disc(fake_2)
        gen_loss = criterion(disc_fake_pred, torch.ones_like(disc_fake_pred))
        gen_loss.backward()
        gen_opt.step()

        # Keep track of the average generator loss
        mean_generator_loss += gen_loss.item() / display_step

        ## Visualization code ##
        if cur_step % display_step == 0:
            # Update progress bar
            loop.set_description(f"Epoch:[{epoch}/{n_epochs}]")
            loop.set_postfix(Generator_loss=gen_loss.item(),Discriminator_loss=disc_loss.item())
            # print(f"Step {cur_step}: Generator loss: {mean_generator_loss}, discriminator loss: {mean_discriminator_loss}")
            real_img_grid=show_tensor_images(real)
            fake_img_grid=show_tensor_images(fake)
            writer_real.add_image('MNIST Real',real_img_grid,global_step=cur_step)
            writer_fake.add_image('MNIST Fake',fake_img_grid,global_step=cur_step)
            writer_real.add_scalar('Generator Loss',gen_loss,global_step=cur_step)
            writer_real.add_scalar('Discriminator Loss',disc_loss,global_step=cur_step)
            mean_generator_loss = 0
            mean_discriminator_loss = 0

            
        cur_step += 1

